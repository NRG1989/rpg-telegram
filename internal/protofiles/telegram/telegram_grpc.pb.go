// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protofiles/telegram/telegram.proto

package telegram

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoAuthRegistrationUserTelegramClient is the client API for GoAuthRegistrationUserTelegram service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoAuthRegistrationUserTelegramClient interface {
	SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error)
}

type goAuthRegistrationUserTelegramClient struct {
	cc grpc.ClientConnInterface
}

func NewGoAuthRegistrationUserTelegramClient(cc grpc.ClientConnInterface) GoAuthRegistrationUserTelegramClient {
	return &goAuthRegistrationUserTelegramClient{cc}
}

func (c *goAuthRegistrationUserTelegramClient) SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error) {
	out := new(SendCodeResponse)
	err := c.cc.Invoke(ctx, "/telegram_server.GoAuthRegistrationUserTelegram/SendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoAuthRegistrationUserTelegramServer is the server API for GoAuthRegistrationUserTelegram service.
// All implementations must embed UnimplementedGoAuthRegistrationUserTelegramServer
// for forward compatibility
type GoAuthRegistrationUserTelegramServer interface {
	SendCode(context.Context, *SendCodeRequest) (*SendCodeResponse, error)
	mustEmbedUnimplementedGoAuthRegistrationUserTelegramServer()
}

// UnimplementedGoAuthRegistrationUserTelegramServer must be embedded to have forward compatible implementations.
type UnimplementedGoAuthRegistrationUserTelegramServer struct {
}

func (UnimplementedGoAuthRegistrationUserTelegramServer) SendCode(context.Context, *SendCodeRequest) (*SendCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (UnimplementedGoAuthRegistrationUserTelegramServer) mustEmbedUnimplementedGoAuthRegistrationUserTelegramServer() {
}

// UnsafeGoAuthRegistrationUserTelegramServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoAuthRegistrationUserTelegramServer will
// result in compilation errors.
type UnsafeGoAuthRegistrationUserTelegramServer interface {
	mustEmbedUnimplementedGoAuthRegistrationUserTelegramServer()
}

func RegisterGoAuthRegistrationUserTelegramServer(s grpc.ServiceRegistrar, srv GoAuthRegistrationUserTelegramServer) {
	s.RegisterService(&GoAuthRegistrationUserTelegram_ServiceDesc, srv)
}

func _GoAuthRegistrationUserTelegram_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAuthRegistrationUserTelegramServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram_server.GoAuthRegistrationUserTelegram/SendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAuthRegistrationUserTelegramServer).SendCode(ctx, req.(*SendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoAuthRegistrationUserTelegram_ServiceDesc is the grpc.ServiceDesc for GoAuthRegistrationUserTelegram service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoAuthRegistrationUserTelegram_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telegram_server.GoAuthRegistrationUserTelegram",
	HandlerType: (*GoAuthRegistrationUserTelegramServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCode",
			Handler:    _GoAuthRegistrationUserTelegram_SendCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/telegram/telegram.proto",
}