// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protofiles/auth/auth.proto

package __auth_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoAuthClient is the client API for GoAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoAuthClient interface {
	SendPhoneNumber(ctx context.Context, in *SendPhoneNumberRequest, opts ...grpc.CallOption) (*SendPhoneNumberResponse, error)
}

type goAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewGoAuthClient(cc grpc.ClientConnInterface) GoAuthClient {
	return &goAuthClient{cc}
}

func (c *goAuthClient) SendPhoneNumber(ctx context.Context, in *SendPhoneNumberRequest, opts ...grpc.CallOption) (*SendPhoneNumberResponse, error) {
	out := new(SendPhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/auth_server.GoAuth/SendPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoAuthServer is the server API for GoAuth service.
// All implementations must embed UnimplementedGoAuthServer
// for forward compatibility
type GoAuthServer interface {
	SendPhoneNumber(context.Context, *SendPhoneNumberRequest) (*SendPhoneNumberResponse, error)
	mustEmbedUnimplementedGoAuthServer()
}

// UnimplementedGoAuthServer must be embedded to have forward compatible implementations.
type UnimplementedGoAuthServer struct {
}

func (UnimplementedGoAuthServer) SendPhoneNumber(context.Context, *SendPhoneNumberRequest) (*SendPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneNumber not implemented")
}
func (UnimplementedGoAuthServer) mustEmbedUnimplementedGoAuthServer() {}

// UnsafeGoAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoAuthServer will
// result in compilation errors.
type UnsafeGoAuthServer interface {
	mustEmbedUnimplementedGoAuthServer()
}

func RegisterGoAuthServer(s grpc.ServiceRegistrar, srv GoAuthServer) {
	s.RegisterService(&GoAuth_ServiceDesc, srv)
}

func _GoAuth_SendPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAuthServer).SendPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_server.GoAuth/SendPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAuthServer).SendPhoneNumber(ctx, req.(*SendPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoAuth_ServiceDesc is the grpc.ServiceDesc for GoAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_server.GoAuth",
	HandlerType: (*GoAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPhoneNumber",
			Handler:    _GoAuth_SendPhoneNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/auth/auth.proto",
}